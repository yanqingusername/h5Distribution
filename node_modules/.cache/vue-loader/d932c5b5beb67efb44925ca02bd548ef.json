{"remainingRequest":"/Users/user/coyote/h5Distribution/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/user/coyote/h5Distribution/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/user/coyote/h5Distribution/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/coyote/h5Distribution/src/pages/instrumentList.vue?vue&type=template&id=4a4973ae&scoped=true&","dependencies":[{"path":"/Users/user/coyote/h5Distribution/src/pages/instrumentList.vue","mtime":1656313580782},{"path":"/Users/user/coyote/h5Distribution/node_modules/cache-loader/dist/cjs.js","mtime":1652332326496},{"path":"/Users/user/coyote/h5Distribution/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1652332325883},{"path":"/Users/user/coyote/h5Distribution/node_modules/cache-loader/dist/cjs.js","mtime":1652332326496},{"path":"/Users/user/coyote/h5Distribution/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1652332325883}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}